#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<queue>
#include<cstring>
#include<string>
#include<cmath>
#include<vector>
#include<stack>
#include<map>
using namespace std;
typedef long long ll;
const int maxn=2000+5;
const int inf=1e9;
struct edge
{
    int from,to,cap,flow,cost;
    edge(int from,int to,int cap,int flow=0,int cost=0):from(from),to(to),cap(cap),flow(flow),cost(cost){}
};
vector<int>mp[maxn];
vector<edge> edges;
void addedge(int from,int to,int cap,int flow=0,int cost=0)
{
    edges.push_back(edge(from,to,cap,flow,cost));
    edges.push_back(edge(to,from,0,-flow,-cost));
    int m=edges.size();
    mp[from].push_back(m-2);
    mp[to].push_back(m-1);
}

int inq[maxn],d[maxn],p[maxn],a[maxn],cnt[maxn];
queue<int> op;
struct MCMF
{
    int n,m,s,t;

    void init(int n)
    {
        this->n=n;
        for(int i=1;i<=n;i++) mp[i].clear();
        edges.clear();
    }   

    int spfa(int s,int t,int& flow,int& cost)
    {
        for(int i=1;i<=n;i++) d[i]=inf;
        d[s]=0;p[s]=0;a[s]=inf;op.push(s);
        memset(inq,0,sizeof(inq));
        while(!op.empty())
        {
            int x=op.front();op.pop();
            inq[x]=0;
            for(int i=0;i<mp[x].size();i++)
            {
                edge& e=edges[mp[x][i]];
                if(e.cap>e.flow&&d[e.to]>d[x]+e.cost)
                {
                    d[e.to]=d[x]+e.cost;
                    p[e.to]=mp[x][i];
                    a[e.to]=min(a[x],e.cap-e.flow);
                    if(!inq[e.to])
                    {
                        op.push(e.to);
                        inq[e.to]=1;
                        if(++cnt[e.to]>n) return -1;
                    }
                }
            }
        }

        if(d[t]==inf) return false;
        flow+=a[t];
        cost+=d[t]*a[t];
        int u=t;
        while(u!=s)
        {
            edges[p[u]].flow+=a[t];
            edges[p[u]^1].flow-=a[t];
            u=edges[p[u]].from;
        }
        return true;
    }

    int mincost(int s,int t)
    {
        int flow=0,cost=0;
        while(spfa(s,t,flow,cost));
        return cost;//也可得到流量，可以利用引用传值。
    }
};
