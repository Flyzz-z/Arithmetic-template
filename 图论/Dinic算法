#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<queue>
#include<cstring>
#include<string>
#include<cmath>
#include<vector>
#include<stack>
#include<map>
using namespace std;
typedef long long ll;
const int maxn=1e5+5;
const int inf=1e9;
int n,d[maxn],cur[maxn];
bool vis[maxn];
struct edge
{
    int from,to,cap,flow;
    edge(int from,int to,int cap,int flow=0):from(from),to(to),cap(cap),flow(flow){}
};
vector<int>mp[maxn];
vector<edge> edges;
void addedge(int from,int to,int cap,int flow=0)
{
    edges.push_back(edge(from,to,cap,flow));
    edges.push_back(edge(to,from,0,-flow));
    int m=edges.size();
    mp[from].push_back(m-2);
    mp[to].push_back(m-1);
}

queue<int> op;
struct Dinic
{
    int s,t;
    //Dinic(int s,int t):s(s),t(t){}
    bool bfs()
    {
        memset(vis,0,sizeof(vis));
        op.push(s);d[s]=0;vis[s]=1;
        while(!op.empty())
        {   
            int x=op.front();op.pop();
            for(int i=0;i<mp[x].size();i++)
            {
                edge e=edges[mp[x][i]];
                if(!vis[e.to]&&e.cap>e.flow)
                {
                    vis[e.to]=1;
                    d[e.to]=d[x]+1;
                    op.push(e.to);
                }
            }

        }
        return vis[t];//若为0,则已无增广路
    }

    int dfs(int x,int a)
    {
        if(x==t||a==0) return a;
        int flow=0,f;
        for(int &i=cur[x];i<mp[x].size();i++)//从上次考虑过的边开始
        {
            edge& e=edges[mp[x][i]];
            if(d[x]+1==d[e.to]&&(f=dfs(e.to,min(a,e.cap-e.flow)))>0)
            {
                e.flow+=f;
                edges[mp[x][i]^1].flow-=f;
                flow+=f;
                a-=f;
                if(a==0) break;
            }
        }
        return flow;
    }

    int maxflow(int s,int t)
    {
        this->s=s;this->t=t;
        int flow=0;

        while(bfs())
        {
            memset(cur,0,sizeof(cur));
            flow+=dfs(s,inf);
        }

        return flow;
    }
};
