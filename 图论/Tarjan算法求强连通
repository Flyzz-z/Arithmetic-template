#include<iostream>
#include<cstdio>
#include<algorithm>
#include<set>
#include<queue>
#include<cstring>
#include<string>
#include<cmath>
#include<vector>
#include<stack>
#include<map>
using namespace std;
typedef long long ll;
const int maxn=1e5+5;
const ll inf=1e11;
struct edge
{
    int u,v,w;
    edge(int u,int v,int w):u(u),v(v),w(w){}
};
struct node
{
    int u;
    ll d;
    node(int u,ll d):u(u),d(d){}
    bool operator <(const node& rhs) const{
        return d>rhs.d;
    }
};

vector<edge> edges;
vector<int> mp[maxn];
int n,m,vis[maxn];
ll d[maxn];
void add_edge(int u,int v,int d)
{
    edges.push_back(edge(u,v,d));
    mp[u].push_back(edges.size()-1);
}

int  pre[maxn],lowlink[maxn],sccno[maxn],dc,scc_cnt;
stack<int> S;
void dfs(int u)
{
    pre[u]=lowlink[u]=++dc;
    S.push(u);
    for(int i=0;i<mp[u].size();i++)
    {
        edge tmp=edges[mp[u][i]];
        int v=tmp.v;
        if(!pre[v])
        {
            dfs(v);
            lowlink[u]=min(lowlink[u],lowlink[v]);
        }
        else if(!sccno[v])
        {
            lowlink[u]=min(lowlink[u],pre[v]);
        }
    }
    if(lowlink[u]==pre[u])
    {
        scc_cnt++;
        for(;;)
        {
            int x=S.top();S.pop();
            sccno[x]=scc_cnt;
            if(x==u) break;
        }
    }
}
